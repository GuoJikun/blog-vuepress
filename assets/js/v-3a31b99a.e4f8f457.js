"use strict";(self.webpackChunkblogs_express=self.webpackChunkblogs_express||[]).push([[1928],{8827:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(273).uE)('<h1>ECMA 2016(ES7)新特性</h1><ol><li><code>Array.prototype.includes()</code>：判断一个数组是否包含一个指定的值，如果包含则返回 true，否则返回 false。</li><li>幂运算符<code>**</code>： a ** b 指数运算符，它与 Math.pow(a, b)相同。</li></ol><h2 id="array-prototype-includes" tabindex="-1"><a class="header-anchor" href="#array-prototype-includes" aria-hidden="true">#</a> Array.prototype.includes()</h2><p><code>includes()</code> 函数用来判断一个数组是否包含一个指定的值，如果包含则返回 <code>true</code>，否则返回<code>false</code>。</p><p><code>includes</code> 函数与 <code>indexOf</code> 函数很相似，下面两个表达式是等价的：</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>valueToFind<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>接下来我们来判断数字中是否包含某个元素：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\narr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\narr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token comment">// fromIndex 参数值也可以为负数，那样从倒数第N个位置开始搜索指定的值。</span>\narr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\narr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 ES7 之前只能通过<code>indexOf()</code>验证数组中是否存在某个元素（返回-1 表示不存在）</p><h2 id="指数操作符" tabindex="-1"><a class="header-anchor" href="#指数操作符" aria-hidden="true">#</a> 指数操作符</h2><p>具有与<code>Math.pow(..)</code>等效的计算结果。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n<span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>\n<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2.5</span><span class="token punctuation">;</span> <span class="token comment">// 5.65685424949238</span>\n<span class="token comment">// a ** b ** c 等同于 a ** (b ** c)</span>\n<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 512</span>\n<span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 512</span>\n<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 64</span>\n<span class="token comment">// 负数使用`**`前先加小括号</span>\n<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// -8</span>\n<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Unexpected</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>注意任何数字，包括 NaN，它的 0 次幂都是 1。</p><p>如果指数是 NaN，结果总是 NaN，无论底数是什么。</p></blockquote>',16),e={render:function(n,s){return p}}},7782:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3a31b99a",path:"/basic/ecma/2016.html",title:"ECMA 2016(ES7)新特性",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Array.prototype.includes()",slug:"array-prototype-includes",children:[{level:3,title:"语法",slug:"语法",children:[]},{level:3,title:"使用",slug:"使用",children:[]}]},{level:2,title:"指数操作符",slug:"指数操作符",children:[{level:3,title:"示例",slug:"示例",children:[]}]}],filePathRelative:"basic/ecma/2016.md",git:{updatedTime:1634016875e3}}}}]);