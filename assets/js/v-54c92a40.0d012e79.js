"use strict";(self.webpackChunkblogs_express=self.webpackChunkblogs_express||[]).push([[9726],{13:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var e=a(273);const t=(0,e.uE)('<h1>浏览器多标签页通信</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>最近在做一个项目的时候，项目中每个模块都要能开多个窗口，而原生的 <code>localStorage</code> 在多窗口下的同步不及时会导致登录信息和 <code>token</code> 不一致，所以研究了下多窗口间的通讯。</p><h2 id="storage-事件" tabindex="-1"><a class="header-anchor" href="#storage-事件" aria-hidden="true">#</a> Storage 事件</h2><p>由于是 localStorage 同步不及时的原因，所以第一时间想到了 Storage 事件，但是使用这个事件会导致不同的窗口间多次触发的问题，影响性能。</p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>两个页面要同源（URL 的协议、域名和端口相同）</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// page1</span>\nlocalStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span>\n  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&quot;消息&quot;</span><span class="token punctuation">,</span>\n    date<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Page 2</span>\n<span class="token comment">// 在page1中改变localStorage中key为message的值，则可以在page2中监听ev.key等于message来通信</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>newValue<span class="token punctuation">,</span> e<span class="token punctuation">.</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>ev</code>中各个属性的详细介绍</p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td>DOMString</td><td>该属性代表被修改的键值。当被 clear()方法清除之后该属性值为 null。（只读）</td></tr><tr><td>newValue</td><td>DOMString</td><td>该属性代表修改后的新值。当被 clear()方法清理后或者该键值对被移除，newValue 的值为 null 。（只读）</td></tr><tr><td>oldValue</td><td>DOMString</td><td>该属性代表修改前的原值。在设置新键值对时由于没有原始值，该属性值为 null。（只读）</td></tr><tr><td>storageArea</td><td>nsIDOMStorage</td><td>被操作的 storage 对象。（只读）</td></tr><tr><td>url</td><td>DOMString</td><td>key 发生改变的对象所在文档的 URL 地址。（只读）</td></tr></tbody></table><h2 id="window-postmessage" tabindex="-1"><a class="header-anchor" href="#window-postmessage" aria-hidden="true">#</a> window.postMessage</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>otherWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> targetOrigin<span class="token punctuation">,</span> <span class="token punctuation">[</span>transfer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><ul><li>otherWindow： 其他窗口的一个引用，比如 <code>iframe</code> 的 <code>contentWindow</code> 属性、执行 <code>window.open</code> 返回的窗口对象、或者是命名过或数值索引的 <code>window.frames</code>。</li><li>message： 将要发送到其他 <code>window</code> 的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。 -targetOrigin： 通过窗口的 <code>origin</code> 属性来指定哪些窗口能接收到消息事件，其值可以是字符串&quot;&quot;（表示无限制）或者一个 URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 <code>targetOrigin</code> 提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用 <code>postMessage</code> 传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的 <code>origin</code> 属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的 <code>targetOrigin</code>，而不是。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</li><li>transfer 可选： 是一串和 <code>message</code> 同时传递的 <code>Transferable</code> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3>',15),p=(0,e.Uk)("示例来自于 "),o={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage#example",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("MDN"),l=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/*\n * A窗口的域名是&lt;http://example.com:8080&gt;，以下是A窗口的script标签下的代码：\n */</span>\n\n<span class="token keyword">var</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">...</span>popup details<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 如果弹出框没有被阻止且加载完成</span>\n\n<span class="token comment">// 这行语句没有发送信息出去，即使假设当前页面没有改变location（因为targetOrigin设置不对）</span>\npopup<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;The user is &#39;bob&#39; and the password is &#39;secret&#39;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://secure.example.net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 假设当前页面没有改变location，这条语句会成功添加message到发送队列中去（targetOrigin设置对了）</span>\npopup<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;hello there!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://example.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 我们能相信信息的发送者吗?  (也许这个发送者和我们最初打开的不是同一个页面).</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token string">&quot;http://example.org&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// event.source 是我们通过window.open打开的弹出页面 popup</span>\n  <span class="token comment">// event.data 是 popup发送给当前页面的消息 &quot;hi there yourself!  the secret response is: rheeeeet!&quot;</span>\n<span class="token punctuation">}</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> receiveMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="broadcastchannel" tabindex="-1"><a class="header-anchor" href="#broadcastchannel" aria-hidden="true">#</a> BroadcastChannel</h2><p>BroadcastChannel 接口代理了一个命名频道，可以让指定 <code>origin</code> 下的任意 <code>browsing context</code> 来订阅它。它允许同源的不同浏览器窗口，Tab 页，frame 或者 iframe 下的不同文档之间相互通信。通过触发一个 <code>message</code> 事件，消息可以广播到所有监听了该频道的 <code>BroadcastChannel</code> 对象。</p><div class="custom-container tip"><p class="custom-container-title">特殊说明</p><p>此特性在 Web Worker 中可用</p></div><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// page1</span>\n<span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;BroadcastChannel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchannel<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// page2</span>\n<span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;BroadcastChannel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, BroadcastChannel!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 在page1中创建一个频道BroadcastChannel，并监听其message事件\n * 在page2中也创建一个频道BroadcastChannel，通过其发送postMessage消息\n * 在page1中便可以接收到page2中的消息\n **/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',6),r=(0,e.Uk)("更多详细信息可以查看 "),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/BroadcastChannel",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("MDN"),d=(0,e._)("h2",{id:"更多方法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#更多方法","aria-hidden":"true"},"#"),(0,e.Uk)(" 更多方法")],-1),k=(0,e._)("li",null,"websocket：多个窗口监听同一个 websocket 服务。",-1),b=(0,e._)("li",null,"cookie：通过定时器监听 cookie 的变化。",-1),m=(0,e.Uk)("sharedWork：这是 Web Worker 之后出来的共享的 Worker，不通页面可以共享这个 Worker。"),g={href:"https://github.com/mdn/simple-shared-worker",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("MDN 上的例子"),w=(0,e.Uk)("。"),v=(0,e._)("li",null,"MessageChannel：Channel Messaging API 的 MessageChannel 接口允许我们创建一个新的消息通道，并通过它的两个 MessagePort 属性发送数据。",-1),f={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",o,[c,(0,e.Wm)(a)])]),l,(0,e._)("p",null,[r,(0,e._)("a",u,[i,(0,e.Wm)(a)])]),d,(0,e._)("ul",null,[k,b,(0,e._)("li",null,[m,(0,e._)("a",g,[h,(0,e.Wm)(a)]),w]),v])],64)}}},8662:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-54c92a40",path:"/basic/js/multi-window-communication.html",title:"浏览器多标签页通信",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前言",slug:"前言",children:[]},{level:2,title:"Storage 事件",slug:"storage-事件",children:[]},{level:2,title:"window.postMessage",slug:"window-postmessage",children:[{level:3,title:"语法",slug:"语法",children:[]},{level:3,title:"参数",slug:"参数",children:[]},{level:3,title:"示例",slug:"示例",children:[]}]},{level:2,title:"BroadcastChannel",slug:"broadcastchannel",children:[{level:3,title:"用法",slug:"用法",children:[]}]},{level:2,title:"更多方法",slug:"更多方法",children:[]}],filePathRelative:"basic/js/multi-window-communication.md",git:{updatedTime:1634016875e3}}}}]);