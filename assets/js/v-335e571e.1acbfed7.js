"use strict";(self.webpackChunkblogs_express=self.webpackChunkblogs_express||[]).push([[9702],{4168:(n,s,a)=>{a.r(s),a.d(s,{default:()=>A});var e=a(273);const p=(0,e._)("h1",null,"ES9 新特性（2018）",-1),t=(0,e._)("li",null,"异步迭代",-1),o=(0,e._)("li",null,"Promise.finally()",-1),c=(0,e._)("li",null,"Rest/Spread 属性",-1),l={href:"http://esnext.justjavac.com/proposal/regexp-named-groups.html",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("正则表达式命名捕获组"),r=(0,e.Uk)("（Regular Expression Named Capture Groups）"),i={href:"https://segmentfault.com/a/1190000006824133",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("正则表达式反向断言"),d=(0,e.Uk)("（lookbehind）"),m=(0,e._)("li",null,"正则表达式 dotAll 模式",-1),b={href:"https://juejin.im/post/6844903622870827022#heading-1",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("正则表达式 Unicode 转义"),h={href:"https://juejin.im/post/6844903622870827022#heading-1",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("非转义序列的模板字符串"),f=(0,e.uE)('<h2 id="_1-异步迭代" tabindex="-1"><a class="header-anchor" href="#_1-异步迭代" aria-hidden="true">#</a> 1.异步迭代</h2><p>在<code>async/await</code>的某些时刻，你可能尝试在同步循环中调用异步函数。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码不会正常运行，下面这段同样也不会：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这段代码中，循环本身依旧保持同步，并在在内部异步函数之前全部调用完成。</p><p>ES2018 引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了<code>next()</code>方法返回一个 Promise。因此<code>await</code>可以和<code>for...of</code>循环一起使用，以串行的方式运行异步操作。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-promise-finally" tabindex="-1"><a class="header-anchor" href="#_2-promise-finally" aria-hidden="true">#</a> 2.Promise.finally()</h2><p>一个 Promise 调用链要么成功到达最后一个<code>.then()</code>，要么失败触发<code>.catch()</code>。在某些情况下，你想要在无论 Promise 运行成功还是失败，运行相同的代码，例如清除，删除对话，关闭数据库连接等。</p><p><code>.finally()</code>允许你指定最终的逻辑：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">doSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doSomething2<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doSomething3<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// finish here!</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_3-rest-spread-属性" tabindex="-1"><a class="header-anchor" href="#_3-rest-spread-属性" aria-hidden="true">#</a> 3.Rest/Spread 属性</h2>',13),x=(0,e.Uk)("ES2015 引入了"),j={href:"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2FRest_parameters",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("Rest 参数"),_=(0,e.Uk)("和"),w={href:"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FSpread_syntax",target:"_blank",rel:"noopener noreferrer"},S=(0,e.Uk)("扩展运算符"),U=(0,e.Uk)("。三个点（...）仅用于数组。Rest 参数语法允许我们将一个不定数量的参数表示为一个数组。"),q=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">restParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">restParam</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> <span class="token operator">...</span>p3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// p1 = 1</span>\n  <span class="token comment">// p2 = 2</span>\n  <span class="token comment">// p3 = [3, 4, 5]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>展开操作符以相反的方式工作，将数组转换成可传递给函数的单独参数。例如<code>Math.max()</code>返回给定数字中的最大值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>ES2018 为对象解构提供了和数组一样的 Rest 参数（）和展开操作符，一个简单的例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>x <span class="token punctuation">}</span> <span class="token operator">=</span> myObject<span class="token punctuation">;</span>\n<span class="token comment">// a = 1</span>\n<span class="token comment">// x = { b: 2, c: 3 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>或者你可以使用它给函数传递参数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">restParam</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">restParam</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>x <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// a = 1</span>\n  <span class="token comment">// x = { b: 2, c: 3 }</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>跟数组一样，Rest 参数只能在声明的结尾处使用。此外，它只适用于每个对象的顶层，如果对象中嵌套对象则无法适用。</p><p>扩展运算符可以在其他对象内使用，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// obj2 is { a: 1, b: 2, c: 3, z: 26 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以使用扩展运算符拷贝一个对象，像是这样<code>obj2 = {...obj1}</code>，但是 <strong>这只是一个对象的浅拷贝</strong>。另外，如果一个对象 A 的属性是对象 B，那么在克隆后的对象 cloneB 中，该属性指向对象 B。</p><h2 id="_4-正则表达式命名捕获组" tabindex="-1"><a class="header-anchor" href="#_4-正则表达式命名捕获组" aria-hidden="true">#</a> 4.正则表达式命名捕获组</h2><p>JavaScript 正则表达式可以返回一个匹配的对象——一个包含匹配字符串的类数组，例如：以<code>YYYY-MM-DD</code>的格式解析日期：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reDate <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([0-9]{4})-([0-9]{2})-([0-9]{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  match <span class="token operator">=</span> reDate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;2018-04-30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  year <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2018</span>\n  month <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 04</span>\n  day <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样的代码很难读懂，并且改变正则表达式的结构有可能改变匹配对象的索引。</p><p>ES2018 允许命名捕获组使用符号<code>?&lt;name&gt;</code>，在打开捕获括号<code>(</code>后立即命名，示例如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reDate <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  match <span class="token operator">=</span> reDate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;2018-04-30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  year <span class="token operator">=</span> match<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>year<span class="token punctuation">,</span> <span class="token comment">// 2018</span>\n  month <span class="token operator">=</span> match<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>month<span class="token punctuation">,</span> <span class="token comment">// 04</span>\n  day <span class="token operator">=</span> match<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>day<span class="token punctuation">;</span> <span class="token comment">// 30</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>任何匹配失败的命名组都将返回<code>undefined</code>。</p><p>命名捕获也可以使用在<code>replace()</code>方法中。例如将日期转换为美国的 MM-DD-YYYY 格式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reDate <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  d <span class="token operator">=</span> <span class="token string">&quot;2018-04-30&quot;</span><span class="token punctuation">,</span>\n  usDate <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reDate<span class="token punctuation">,</span> <span class="token string">&quot;$&lt;month&gt;-$&lt;day&gt;-$&lt;year&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_5-正则表达式反向断言" tabindex="-1"><a class="header-anchor" href="#_5-正则表达式反向断言" aria-hidden="true">#</a> 5.正则表达式反向断言</h2><p>目前 JavaScript 在正则表达式中支持先行断言（lookahead）。这意味着匹配会发生，但不会有任何捕获，并且断言没有包含在整个匹配字段中。例如从价格中捕获货币符号：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reLookahead <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\D(?=\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  match <span class="token operator">=</span> reLookahead<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;$123.89&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>ES2018 引入以相同方式工作但是匹配前面的反向断言（lookbehind），这样我就可以忽略货币符号，单纯的捕获价格的数字：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reLookbehind <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\D)\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  match <span class="token operator">=</span> reLookbehind<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;$123.89&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.89</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>以上是 <strong>肯定反向断言</strong>，非数字<code>\\D</code>必须存在。同样的，还存在 <strong>否定反向断言</strong>，表示一个值必须不存在，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reLookbehindNeg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!\\D)\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  match <span class="token operator">=</span> reLookbehind<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;$123.89&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_6-正则表达式-dotall-模式" tabindex="-1"><a class="header-anchor" href="#_6-正则表达式-dotall-模式" aria-hidden="true">#</a> 6.正则表达式 dotAll 模式</h2><p>正则表达式中点<code>.</code>匹配除回车外的任何单字符，标记<code>s</code>改变这种行为，允许行终止符的出现，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello.world</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello\\nworld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token operator">/</span>hello<span class="token punctuation">.</span>world<span class="token operator">/</span>s<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello\\nworld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_7-正则表达式-unicode-转义" tabindex="-1"><a class="header-anchor" href="#_7-正则表达式-unicode-转义" aria-hidden="true">#</a> 7.正则表达式 Unicode 转义</h3><p>到目前为止，在正则表达式中本地访问 Unicode 字符属性是不被允许的。ES2018 添加了 Unicode 属性转义——形式为<code>\\p{...}</code>和<code>\\P{...}</code>，在正则表达式中使用标记 <code>u</code> (unicode) 设置，在<code>\\p</code>块儿内，可以以键值对的方式设置需要匹配的属性而非具体内容。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reGreekSymbol <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{Script=Greek}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>\nreGreekSymbol<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;π&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>此特性可以避免使用特定 Unicode 区间来进行内容类型判断，提升可读性和可维护性。</p><h2 id="_8-非转义序列的模板字符串" tabindex="-1"><a class="header-anchor" href="#_8-非转义序列的模板字符串" aria-hidden="true">#</a> 8.非转义序列的模板字符串</h2>',35),F=(0,e.Uk)("之前，"),D=(0,e._)("code",null,"\\u",-1),R=(0,e.Uk)("开始一个 unicode 转义，"),E=(0,e._)("code",null,"\\x",-1),P=(0,e.Uk)("开始一个十六进制转义，"),W=(0,e._)("code",null,"\\",-1),z=(0,e.Uk)("后跟一个数字开始一个八进制转义。这使得创建特定的字符串变得不可能，例如 Windows 文件路径 "),Y=(0,e._)("code",null,"C:\\uuu\\xxx\\111",-1),C=(0,e.Uk)("。更多细节参考"),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings",target:"_blank",rel:"noopener noreferrer"},$=(0,e.Uk)("模板字符串"),A={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("ul",null,[t,o,c,(0,e._)("li",null,[(0,e._)("a",l,[u,(0,e.Wm)(a)]),r]),(0,e._)("li",null,[(0,e._)("a",i,[k,(0,e.Wm)(a)]),d]),m,(0,e._)("li",null,[(0,e._)("a",b,[g,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",h,[v,(0,e.Wm)(a)])])]),f,(0,e._)("p",null,[x,(0,e._)("a",j,[y,(0,e.Wm)(a)]),_,(0,e._)("a",w,[S,(0,e.Wm)(a)]),U]),q,(0,e._)("p",null,[F,D,R,E,P,W,z,Y,C,(0,e._)("a",L,[$,(0,e.Wm)(a)])])],64)}}},7247:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-335e571e",path:"/basic/ecma/2018.html",title:"ES9 新特性（2018）",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.异步迭代",slug:"_1-异步迭代",children:[]},{level:2,title:"2.Promise.finally()",slug:"_2-promise-finally",children:[]},{level:2,title:"3.Rest/Spread 属性",slug:"_3-rest-spread-属性",children:[]},{level:2,title:"4.正则表达式命名捕获组",slug:"_4-正则表达式命名捕获组",children:[]},{level:2,title:"5.正则表达式反向断言",slug:"_5-正则表达式反向断言",children:[]},{level:2,title:"6.正则表达式 dotAll 模式",slug:"_6-正则表达式-dotall-模式",children:[{level:3,title:"7.正则表达式 Unicode 转义",slug:"_7-正则表达式-unicode-转义",children:[]}]},{level:2,title:"8.非转义序列的模板字符串",slug:"_8-非转义序列的模板字符串",children:[]}],filePathRelative:"basic/ecma/2018.md",git:{updatedTime:1634016875e3}}}}]);