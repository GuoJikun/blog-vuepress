"use strict";(self.webpackChunkblogs_express=self.webpackChunkblogs_express||[]).push([[4840],{1674:(n,s,a)=>{a.r(s),a.d(s,{default:()=>en});var e=a(273);const t=(0,e.uE)('<h1>ES8(es2017)新特性</h1><ol><li><code>Object.values()/Object.entries()</code></li><li>async/await</li><li>String padding: <code>padStart()</code>和<code>padEnd()</code>，填充字符串达到当前长度</li><li>函数参数列表结尾允许逗号</li><li><code>Object.getOwnPropertyDescriptors()</code></li><li><code>ShareArrayBuffer</code>和<code>Atomics</code>对象，用于从共享内存位置读取和写入</li></ol><h2 id="_1-async-await" tabindex="-1"><a class="header-anchor" href="#_1-async-await" aria-hidden="true">#</a> 1.async/await</h2><p>ES2018 引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了<code>next()</code>方法返回一个 Promise。因此<code>await</code>可以和<code>for...of</code>循环一起使用，以串行的方式运行异步操作。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="object-values-object-entries" tabindex="-1"><a class="header-anchor" href="#object-values-object-entries" aria-hidden="true">#</a> Object.values()/Object.entries()</h2><ul><li><code>Object.values()</code>: 返回对象的<code>value</code>数组。</li><li><code>Object.entries()</code>: 返回对象的<code>[key, value]</code>数组。</li></ul><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  d<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// [ [ &#39;a&#39;, 1 ], [ &#39;b&#39;, 2 ], [ &#39;c&#39;, 3 ], [ &#39;d&#39;, 4 ] ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="string-padding" tabindex="-1"><a class="header-anchor" href="#string-padding" aria-hidden="true">#</a> String padding</h2><p>在 ES8 中 String 新增了两个实例函数<code>String.prototype.padStart</code>和<code>String.prototype.padEnd</code>，允许将空字符串或其他字符串添加到原始字符串的开头或结尾。</p><blockquote><p>String.padStart(targetLength[,padString])</p></blockquote><ul><li>targetLength:当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li><li>padString:(可选)填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 &quot; &quot;。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;  cat&#39;</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;aacat&#39;</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;cat&#39;   指定长度小于字符串长度，将不会追加字符串</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;abcat&#39;</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;abcabcat&#39; 如果追加一次没有达到指定长度会追加多次</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>String.padEnd(targetLength[,padString])</p></blockquote><ul><li>targetLength:当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li><li>padString:(可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 &quot; &quot;；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;cat  &#39;</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;cataa&#39;</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;cat&#39;</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;catab&#39;</span>\n<span class="token string">&quot;cat&quot;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;catabcab&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_5-函数参数列表结尾允许逗号" tabindex="-1"><a class="header-anchor" href="#_5-函数参数列表结尾允许逗号" aria-hidden="true">#</a> 5.函数参数列表结尾允许逗号</h2><p>在某些代码库/样式指南中，出现了功能调用和定义在多行（下列）中拆分的场景：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clownPuppiesEverywhere</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">clownPuppiesEverywhere</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这些情况下，当其他代码贡献者出现并将其他参数添加到这些参数列表之一时，他们必须进行两行更新：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clownPuppiesEverywhere</span><span class="token punctuation">(</span>\n  param1<span class="token punctuation">,</span>\n  param2<span class="token punctuation">,</span> <span class="token comment">// updated to add a comma</span>\n  param3 <span class="token comment">// updated to add new parameter</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">clownPuppiesEverywhere</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token comment">// updated to add a comma</span>\n  <span class="token string">&quot;baz&quot;</span> <span class="token comment">// updated to add new parameter</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在对版本控制系统管理的代码（git、颠覆、善变等）进行此更改的过程中，第 3 行和第 9 行的指责/注释代码历史记录信息将更新为指向添加逗号的人（而不是最初添加参数的人）。</p><p>为了帮助缓解这个问题，一些其他语言（Python，D，哈克，...可能是其他人。。。）已添加语法支持，以便在这些参数列表中使用尾随逗号。这允许代码贡献者始终在以下每行参数列表中用尾随逗号结束参数添加，并且不必再担心代码归因问题：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clownPuppiesEverywhere</span><span class="token punctuation">(</span>\n  param1<span class="token punctuation">,</span>\n  param2 <span class="token comment">// Next parameter that&#39;s added only has to add a new line, not modify this line</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">clownPuppiesEverywhere</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;bar&quot;</span> <span class="token comment">// Next parameter that&#39;s added only has to add a new line, not modify this line</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>请注意，此建议仅针对语法，并且不会更改语义</p><h2 id="_6-object-getownpropertydescriptors" tabindex="-1"><a class="header-anchor" href="#_6-object-getownpropertydescriptors" aria-hidden="true">#</a> 6.Object.getOwnPropertyDescriptors()</h2><p><code>Object.getOwnPropertyDescriptors()</code>函数用来获取一个对象的所有自身属性的描述符,如果没有任何自身属性，则返回空对象。</p><blockquote><p>函数原型：</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>返回<code>obj</code>对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   age: {</span>\n<span class="token comment">//     configurable: true,</span>\n<span class="token comment">//     enumerable: true,</span>\n<span class="token comment">//     get: function age(){}, //the getter function</span>\n<span class="token comment">//     set: undefined</span>\n<span class="token comment">//   },</span>\n<span class="token comment">//   name: {</span>\n<span class="token comment">//     configurable: true,</span>\n<span class="token comment">//     enumerable: true,</span>\n<span class="token comment">//     value:&quot;Tom&quot;,</span>\n<span class="token comment">//     writable:true</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="_7-sharedarraybuffer-对象" tabindex="-1"><a class="header-anchor" href="#_7-sharedarraybuffer-对象" aria-hidden="true">#</a> 7.SharedArrayBuffer 对象</h2>',35),p=(0,e._)("strong",null,[(0,e._)("code",null,"SharedArrayBuffer")],-1),o=(0,e.Uk)("  对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于  "),l={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",target:"_blank",rel:"noopener noreferrer"},c=(0,e._)("code",null,"ArrayBuffer",-1),r=(0,e.Uk)("  对象，它们都可以用来在共享内存（shared memory）上创建视图。与  "),u=(0,e._)("code",null,"ArrayBuffer",-1),i=(0,e.Uk)("  不同的是，"),b=(0,e._)("code",null,"SharedArrayBuffer",-1),k=(0,e.Uk)("  不能被分离。"),d=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n *\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">length</span> 所创建的数组缓冲区的大小，以字节(byte)为单位。\n * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>SharedArrayBuffer<span class="token punctuation">}</span></span> 一个大小指定的新 SharedArrayBuffer 对象。其内容被初始化为 0。\n */</span>\n<span class="token keyword">new</span> <span class="token class-name">SharedArrayBuffer</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="atomics-对象" tabindex="-1"><a class="header-anchor" href="#atomics-对象" aria-hidden="true">#</a> Atomics 对象</h2>',2),m=(0,e.Uk)("共享内存能被同时创建和更新于工作者线程或主线程。依赖于系统（CPU，操作系统，浏览器），变化传递给所有上下文环境需要一段时间。需要通过  "),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("atomic"),f=(0,e.Uk)("  操作来进行同步。"),_=(0,e._)("p",null,"Atomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作。",-1),v=(0,e._)("p",null,"这些原子操作属于 Atomics 模块。与一般的全局对象不同，Atomics 不是构造函数，因此不能使用 new 操作符调用，也不能将其当作函数直接调用。Atomics 的所有属性和方法都是静态的（与 Math 对象一样）。",-1),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add",target:"_blank",rel:"noopener noreferrer"},y=(0,e._)("code",null,"Atomics.add()",-1),q=(0,e._)("li",null,[(0,e._)("p",null,"将指定位置上的数组元素与给定的值相加，并返回相加前该元素的值。")],-1),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and",target:"_blank",rel:"noopener noreferrer"},S=(0,e._)("code",null,"Atomics.and()",-1),A=(0,e._)("li",null,[(0,e._)("p",null,"将指定位置上的数组元素与给定的值相与，并返回与操作前该元素的值。")],-1),O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange",target:"_blank",rel:"noopener noreferrer"},x=(0,e._)("code",null,"Atomics.compareExchange()",-1),z=(0,e._)("li",null,[(0,e._)("p",null,"如果数组中指定的元素与给定的值相等，则将其更新为新的值，并返回该元素原先的值。")],-1),W={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange",target:"_blank",rel:"noopener noreferrer"},E=(0,e._)("code",null,"Atomics.exchange()",-1),C=(0,e._)("li",null,[(0,e._)("p",null,"将数组中指定的元素更新为给定的值，并返回该元素更新前的值。")],-1),U={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree",target:"_blank",rel:"noopener noreferrer"},N=(0,e._)("code",null,"Atomics.isLockFree(size)",-1),P=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("可以用来检测当前系统是否支持硬件级的原子操作。对于指定大小的数组，如果当前系统支持硬件级的原子操作，则返回  "),(0,e._)("code",null,"true"),(0,e.Uk)("；否则就意味着对于该数组，"),(0,e._)("code",null,"Atomics"),(0,e.Uk)("  对象中的各原子操作都只能用锁来实现。此函数面向的是技术专家。")])],-1),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load",target:"_blank",rel:"noopener noreferrer"},G=(0,e._)("code",null,"Atomics.load()",-1),J=(0,e._)("li",null,[(0,e._)("p",null,"返回数组中指定元素的值。")],-1),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify",target:"_blank",rel:"noopener noreferrer"},D=(0,e._)("code",null,"Atomics.notify()",-1),L=(0,e._)("li",null,[(0,e._)("p",null,"唤醒等待队列中正在数组指定位置的元素上等待的线程。返回值为成功唤醒的线程数量。")],-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or",target:"_blank",rel:"noopener noreferrer"},F=(0,e._)("code",null,"Atomics.or()",-1),H=(0,e._)("li",null,[(0,e._)("p",null,"将指定位置上的数组元素与给定的值相或，并返回或操作前该元素的值。")],-1),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store",target:"_blank",rel:"noopener noreferrer"},Y=(0,e._)("code",null,"Atomics.store()",-1),I=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("将数组中指定的元素设置为给定的值，并返回"),(0,e._)("strong",null,"该值"),(0,e.Uk)("。")])],-1),K={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub",target:"_blank",rel:"noopener noreferrer"},Q=(0,e._)("code",null,"Atomics.sub()",-1),V=(0,e._)("li",null,[(0,e._)("p",null,"将指定位置上的数组元素与给定的值相减，并返回相减前该元素的值。")],-1),X={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait",target:"_blank",rel:"noopener noreferrer"},Z=(0,e._)("code",null,"Atomics.wait()",-1),$=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)('检测数组中某个指定位置上的值是否仍然是给定值，是则保持挂起直到被唤醒或超时。返回值为 "'),(0,e._)("code",null,"ok"),(0,e.Uk)('"、"'),(0,e._)("code",null,"not-equal"),(0,e.Uk)('" 或 "'),(0,e._)("code",null,"time-out"),(0,e.Uk)('"。调用时，如果当前线程不允许阻塞，则会抛出异常（大多数浏览器都不允许在主线程中调用  '),(0,e._)("code",null,"wait()"),(0,e.Uk)("）。")])],-1),nn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor",target:"_blank",rel:"noopener noreferrer"},sn=(0,e._)("code",null,"Atomics.xor()",-1),an=(0,e._)("li",null,[(0,e._)("p",null,"将指定位置上的数组元素与给定的值相异或，并返回异或操作前该元素的值。")],-1),en={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,o,(0,e._)("a",l,[c,(0,e.Wm)(a)]),r,u,i,b,k]),d,(0,e._)("p",null,[m,(0,e._)("a",g,[h,(0,e.Wm)(a)]),f]),_,v,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",j,[y,(0,e.Wm)(a)])])]),q,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("strong",null,[(0,e._)("a",w,[S,(0,e.Wm)(a)])])])]),A,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",O,[x,(0,e.Wm)(a)])])]),z,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",W,[E,(0,e.Wm)(a)])])]),C,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",U,[N,(0,e.Wm)(a)])])]),P,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",R,[G,(0,e.Wm)(a)])])]),J,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",B,[D,(0,e.Wm)(a)])])]),L,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",T,[F,(0,e.Wm)(a)])])]),H,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",M,[Y,(0,e.Wm)(a)])])]),I,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",K,[Q,(0,e.Wm)(a)])])]),V,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",X,[Z,(0,e.Wm)(a)])])]),$,(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",nn,[sn,(0,e.Wm)(a)])])]),an])],64)}}},3482:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-36c8085c",path:"/basic/ecma/2017.html",title:"ES8(es2017)新特性",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.async/await",slug:"_1-async-await",children:[]},{level:2,title:"Object.values()/Object.entries()",slug:"object-values-object-entries",children:[{level:3,title:"语法",slug:"语法",children:[]},{level:3,title:"示例",slug:"示例",children:[]}]},{level:2,title:"String padding",slug:"string-padding",children:[]},{level:2,title:"5.函数参数列表结尾允许逗号",slug:"_5-函数参数列表结尾允许逗号",children:[]},{level:2,title:"6.Object.getOwnPropertyDescriptors()",slug:"_6-object-getownpropertydescriptors",children:[]},{level:2,title:"7.SharedArrayBuffer 对象",slug:"_7-sharedarraybuffer-对象",children:[]},{level:2,title:"Atomics 对象",slug:"atomics-对象",children:[]}],filePathRelative:"basic/ecma/2017.md",git:{updatedTime:1634016875e3}}}}]);