"use strict";(self.webpackChunkblogs_express=self.webpackChunkblogs_express||[]).push([[6507],{9904:(n,e,a)=>{a.r(e),a.d(e,{default:()=>w});var s=a(273);const t=(0,s.uE)('<h1>MutationObserver API</h1><h2 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h2><p><code>MutationObserver</code>接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p><p>但是，它与 Mutation Events 事件有一个本质不同：事件是同步触发，也就是说，DOM 的变动立刻会触发相应的事件；Mutation Observer 则是异步触发，DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。</p><p>Mutation Observer 有以下特点：</p><blockquote><ul><li>异步触发方式</li><li>它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。</li><li>它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。</li></ul></blockquote><h2 id="_2、mutationobserver-构造函数" tabindex="-1"><a class="header-anchor" href="#_2、mutationobserver-构造函数" aria-hidden="true">#</a> 2、MutationObserver()构造函数</h2><p>使用时，会使用<code>MutationObserver</code>构造函数创建并返回一个新的  <code>MutationObserver</code>实例，  它会在指定的 DOM 发生变化时被调用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码中的<code>callback</code>函数，会在每次 DOM 变动后调用。该回调函数接受两个参数，第一个是变动数组，第二个是观察器实例，下面是一个例子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">mutationList<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  mutationList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&quot;childList&quot;</span><span class="token operator">:</span>\n        <span class="token comment">/* 从树上添加或移除一个或更多的子节点；参见 mutation.addedNodes 与\n           mutation.removedNodes */</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&quot;attributes&quot;</span><span class="token operator">:</span>\n        <span class="token comment">/* mutation.target 中某节点的一个属性值被更改；该属性名称在 mutation.attributeName 中，\n           该属性之前的值为 mutation.oldValue */</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_3、mutationobserver-实例的方法" tabindex="-1"><a class="header-anchor" href="#_3、mutationobserver-实例的方法" aria-hidden="true">#</a> 3、MutationObserver 实例的方法</h2><h3 id="_3-1、-observe" tabindex="-1"><a class="header-anchor" href="#_3-1、-observe" aria-hidden="true">#</a> 3.1、 <code>observe()</code></h3><p><code>observe</code>方法用来启动监听，它接受两个参数：</p><blockquote><ul><li>第一个参数：所要观察的 DOM 节点</li><li>第二个参数：一个配置对象，指定所要观察的特定变动</li></ul></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 得到要观察的元素</span>\n<span class="token keyword">const</span> elementToObserve <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#targetElementId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个叫 `observer` 的新 `MutationObserver` 实例，</span>\n<span class="token comment">// 并将回调函数传给它</span>\n<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback that runs when observer is triggered&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在 MutationObserver 实例上调用 `observe` 方法，</span>\n<span class="token comment">// 并将要观察的元素与选项传给此方法</span>\n<span class="token keyword">const</span> conf <span class="token operator">=</span> <span class="token punctuation">{</span>\n  subtree<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  childList<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nobserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>elementToObserve<span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',16),o=(0,s.Uk)("上面代码中，"),c=(0,s._)("code",null,"observe",-1),r=(0,s.Uk)("方法接受两个参数，第一个是所要观察的 DOM 元素是"),p=(0,s._)("code",null,"elementToObserve",-1),l=(0,s.Uk)("，第二个是所要观察的变动类型（一个可选的"),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserverInit",target:"_blank",rel:"noopener noreferrer"},u=(0,s._)("code",null,"MutationObserverInit",-1),d=(0,s.Uk)("  对象）。"),b=(0,s.uE)('<p>观察器所能观察的 DOM 变动类型（即上面代码的<code>conf</code>对象），有以下几种。</p><blockquote><ul><li>childList：子节点的变动（指新增，删除或者更改）。</li><li>attributes：属性的变动。</li><li>characterData：节点内容或节点文本的变动。</li></ul></blockquote><p>想要观察哪一种变动类型，就在<code>conf</code>对象中指定它的值为<code>true</code>。 提醒：三种类型必须有一个为 true，否则会抛出  <code>TypeError</code>  异常</p><p>下面时所有的<code>conf</code>配置项：</p><ul><li><p><code>attributeFilter</code>可选：要监视的特定属性名称的数组。如果未包含此属性，则对所有属性的更改都会触发变动通知。无默认值。</p></li><li><p><code>attributeOldValue</code>可选：当监视节点的属性改动时，将此属性设为  <code>true</code>  将记录任何有改动的属性的上一个值。有关观察属性更改和值记录的详细信息。无默认值。</p></li><li><p><code>attributes</code>  可选：设为  <code>true</code>  以观察受监视元素的属性值变更。默认值为  <code>false</code>。</p></li><li><p><code>characterData</code>可选：设为  <code>true</code>  以监视指定目标节点或子节点树中节点所包含的字符数据的变化。无默认值。</p></li><li><p><code>characterDataOldValue</code>可选：设为  <code>true</code>  以在文本在受监视节点上发生更改时记录节点文本的先前值。无默认值。</p></li><li><p><code>childList</code>可选：设为  <code>true</code>  以监视目标节点（如果  <code>subtree</code>  为  <code>true</code>，则包含子孙节点）添加或删除新的子节点。默认值为  <code>false</code>。</p></li><li><p><code>subtree</code>可选：设为  <code>true</code>  以将监视范围扩展至目标节点整个节点树中的所有节点。<code>MutationObserverInit</code>  的其他值也会作用于此子树下的所有节点，而不仅仅只作用于目标节点。默认值为  <code>false</code>。</p></li></ul><h3 id="_3-2、-disconnect" tabindex="-1"><a class="header-anchor" href="#_3-2、-disconnect" aria-hidden="true">#</a> 3.2、 <code>disconnect()</code></h3><p><code>disconnect</code>方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_3-3、-takerecords" tabindex="-1"><a class="header-anchor" href="#_3-3、-takerecords" aria-hidden="true">#</a> 3.3、 <code>takeRecords()</code></h3><p>从 MutationObserver 的通知队列中删除所有待处理的通知，并将它们返回到[<code>MutationRecord</code>]</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>observer<span class="token punctuation">.</span><span class="token function">takeRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_4、mutationrecord-对象" tabindex="-1"><a class="header-anchor" href="#_4、mutationrecord-对象" aria-hidden="true">#</a> 4、MutationRecord 对象</h2><p>DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 处理的就是一个个<code>MutationRecord</code>实例所组成的数组。</p><p><code>MutationRecord</code>对象包含了 DOM 的相关信息，有如下属性：</p><ul><li><code>type</code>：观察的变动类型（<code>attribute</code>、<code>characterData</code>或者<code>childList</code>）。</li><li><code>target</code>：发生变动的 DOM 节点。</li><li><code>addedNodes</code>：新增的 DOM 节点。</li><li><code>removedNodes</code>：删除的 DOM 节点。</li><li><code>previousSibling</code>：前一个同级节点，如果没有则返回 <code>null</code>。</li><li><code>nextSibling</code>：下一个同级节点，如果没有则返回 <code>null</code>。</li><li><code>attributeName</code>：发生变动的属性。如果设置了 <code>attributeFilter</code> ，则只返回预先指定的属性。</li><li><code>oldValue</code>：变动前的值。这个属性只对 <code>attribute</code> 和 <code>characterData</code> 变动有效，如果发生<code>childList</code>变动，则返回<code>null</code>。</li></ul><h2 id="_5、示例" tabindex="-1"><a class="header-anchor" href="#_5、示例" aria-hidden="true">#</a> 5、示例</h2><p>监听文字变动</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9cab0ef8c0d84ae7891ea06d02eebcff~tplv-k3u1fbpfcp-watermark.image" alt="企业微信截图_20210902172012.png"></p><h2 id="_6、参考链接" tabindex="-1"><a class="header-anchor" href="#_6、参考链接" aria-hidden="true">#</a> 6、参考链接</h2>',19),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"},m=(0,s.Uk)("MutationObserver - Web API 接口参考 | MDN (mozilla.org)"),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/MutationObserver",target:"_blank",rel:"noopener noreferrer"},h=(0,s.Uk)("MutationObserver.MutationObserver() - Web API 接口参考 | MDN (mozilla.org)"),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/observe",target:"_blank",rel:"noopener noreferrer"},M=(0,s.Uk)("MutationObserver.observe() - Web API 接口参考 | MDN (mozilla.org)"),O={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserverInit",target:"_blank",rel:"noopener noreferrer"},f=(0,s.Uk)("MutationObserverInit - Web API 接口参考 | MDN (mozilla.org)"),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationRecord",target:"_blank",rel:"noopener noreferrer"},D=(0,s.Uk)("MutationRecord - Web API 接口参考 | MDN (mozilla.org)"),w={render:function(n,e){const a=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("p",null,[o,c,r,p,l,(0,s._)("a",i,[u,(0,s.Wm)(a)]),d]),b,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",k,[m,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",v,[h,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",g,[M,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",O,[f,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",_,[D,(0,s.Wm)(a)])])])],64)}}},6407:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-87f5b32a",path:"/basic/js/mutation-observer.html",title:"MutationObserver API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1、概述",slug:"_1、概述",children:[]},{level:2,title:"2、MutationObserver()构造函数",slug:"_2、mutationobserver-构造函数",children:[]},{level:2,title:"3、MutationObserver 实例的方法",slug:"_3、mutationobserver-实例的方法",children:[{level:3,title:"3.1、 observe()",slug:"_3-1、-observe",children:[]},{level:3,title:"3.2、 disconnect()",slug:"_3-2、-disconnect",children:[]},{level:3,title:"3.3、 takeRecords()",slug:"_3-3、-takerecords",children:[]}]},{level:2,title:"4、MutationRecord 对象",slug:"_4、mutationrecord-对象",children:[]},{level:2,title:"5、示例",slug:"_5、示例",children:[]},{level:2,title:"6、参考链接",slug:"_6、参考链接",children:[]}],filePathRelative:"basic/js/mutation-observer.md",git:{updatedTime:1634016875e3}}}}]);