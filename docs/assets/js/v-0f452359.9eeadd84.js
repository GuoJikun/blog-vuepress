"use strict";(self.webpackChunkblogs_gjk=self.webpackChunkblogs_gjk||[]).push([[782],{7128:(n,a,s)=>{s.r(a),s.d(a,{default:()=>v});var t=s(6252);const e=(0,t.uE)('<h1 id="ecmascript-2021-主要包含内容" tabindex="-1"><a class="header-anchor" href="#ecmascript-2021-主要包含内容" aria-hidden="true">#</a> ECMAScript 2021 主要包含内容</h1><blockquote><p>ECMAScript 2021 于 2021 年 6 月 22 日获得 ECMA International 的批准。ECMAScript 是标准化的 JavaScript 语言，于 1997 年发布了第一版，现已发展成为世界上使用最广泛的通用编程语言之一。</p><p>本 Ecma 标准定义了 ECMAScript 2021 Language，是 ECMAScript 语言规范的第 12 版。</p></blockquote><h2 id="string-prototype-replaceall" tabindex="-1"><a class="header-anchor" href="#string-prototype-replaceall" aria-hidden="true">#</a> String.prototype.replaceAll</h2><p>此前，如果想要替换所有的 string occurrences，则需要使用 String.prototype.replace 和全局 regexp 的组合。现在，String.prototype.replaceAll 简化了这一点。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello-world&#39;</span>\n\n<span class="token comment">// before</span>\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// &quot;hello_world&quot;</span>\n\n<span class="token comment">// now</span>\nstr<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// &quot;hello_world&quot;</span>\n</code></pre></div>',5),p={href:"https://github.com/tc39/proposal-string-replaceall",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Wm)("strong",null,"查看更多",-1),c=(0,t.uE)('<h2 id="promise-any" tabindex="-1"><a class="header-anchor" href="#promise-any" aria-hidden="true">#</a> Promise.any</h2><p>将 Promise.any 加入了 2021 年规范中的 Promise combinators 列表。当你想处理第一个 fulfills 的 Promise 时，可以使用 Promise.any。与 Promise.race 不同，当其中一个 promises fail 时，它不会 reject。更多详情可查看“Promise combinators explained”。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 官方提供例子-检测哪个网站更快</span>\nPromise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://v8.dev/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://v8.dev/blog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;blog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://v8.dev/docs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;docs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">first</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Any of the promises was fulfilled.</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>\n        <span class="token comment">// → &#39;home&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// All of the promises were rejected.</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',3),l={href:"https://github.com/tc39/proposal-promise-any",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Wm)("strong",null,"查看更多",-1),i=(0,t.uE)('<h2 id="weakrefs" tabindex="-1"><a class="header-anchor" href="#weakrefs" aria-hidden="true">#</a> WeakRefs</h2><p>WeakRefs 提案为语言带来了两个新的 contructors：WeakRef 和 FinalizationRegistry。这些新功能是更复杂、更低级的语言概念。</p><h3 id="_1、weakref" tabindex="-1"><a class="header-anchor" href="#_1、weakref" aria-hidden="true">#</a> 1、WeakRef</h3><p>当将一个对象分配给一个变量时，它指向存储这个对象的值的那块内存（强引用）。如果程序不再引用这个对象，garbage collector 会销毁它并回收内存。WeakRef 的一个实例创建了一个对给定对象的引用，如果该对象仍然在内存中，则返回该对象；如果目标对象已经被垃圾回收，则返回未定义的对象。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> spec<span class="token operator">:</span> <span class="token string">&#39;ES2021&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> objWeakRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nobjWeakRef<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果对象obj被回收则返回undefined，否则就返回obj</span>\n</code></pre></div><h3 id="_2、finalizationregistry" tabindex="-1"><a class="header-anchor" href="#_2、finalizationregistry" aria-hidden="true">#</a> 2、FinalizationRegistry</h3><p>FinalizationRegistry 的实例在注册的目标对象被垃圾收集后触发回调函数。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> spec<span class="token operator">:</span> <span class="token string">&#39;ES2021&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 被回收则执行</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nregistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;ECMAScript 2021&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 对象obj被回收时会执行此回调函数</span>\n</code></pre></div><p>值得注意的是，官方提示要尽量避免使用 WeakRef 和 FinalizationRegistry，垃圾回收机制依赖于 JavaScript 引擎的实现，不同的引擎或是不同版本的引擎可能会有所不同。</p>',9),u={href:"https://github.com/tc39/proposal-weakrefs",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Wm)("strong",null,"查看更多",-1),m=(0,t.uE)('<h2 id="logical-assignment-operators" tabindex="-1"><a class="header-anchor" href="#logical-assignment-operators" aria-hidden="true">#</a> Logical Assignment Operators</h2><p>顾名思义，逻辑赋值运算符是逻辑运算符（&amp;&amp;, || and ??）和赋值运算符（=）的组合。</p><blockquote><p>??(空值合并操作符-ecma2020);示例: let a = null ?? 2; // 2</p></blockquote><div class="language-javascript ext-js"><pre class="language-javascript"><code>a <span class="token operator">&amp;&amp;=</span> b <span class="token comment">//  a = a &amp;&amp; b;</span>\na <span class="token operator">||=</span> b <span class="token comment">//  a = a || b;</span>\na <span class="token operator">??=</span> b <span class="token comment">//  a = a ?? b;</span>\n</code></pre></div>',4),g={href:"https://github.com/tc39/proposal-logical-assignment",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Wm)("strong",null,"查看更多",-1),h=(0,t.uE)('<h2 id="numeric-separators" tabindex="-1"><a class="header-anchor" href="#numeric-separators" aria-hidden="true">#</a> Numeric separators</h2><p>数字的可读性随着数字长度的增加而降低。现在，则可以使用下划线（_, U+005F）来分隔数字组，使得长数字更加清晰可读。这个功能在 Java、Python、Perl、Ruby、Rust、Julia、Ada、C# 等其他编程语言中也很有名。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> population <span class="token operator">=</span> <span class="token number">37_653_260</span>\n</code></pre></div>',3),b={href:"https://github.com/tc39/proposal-numeric-separator",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Wm)("strong",null,"查看更多",-1),v={render:function(n,a){const s=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[e,(0,t.Wm)("p",null,[(0,t.Wm)("a",p,[o,(0,t.Wm)(s)])]),c,(0,t.Wm)("p",null,[(0,t.Wm)("a",l,[r,(0,t.Wm)(s)])]),i,(0,t.Wm)("p",null,[(0,t.Wm)("a",u,[k,(0,t.Wm)(s)])]),m,(0,t.Wm)("p",null,[(0,t.Wm)("a",g,[d,(0,t.Wm)(s)])]),h,(0,t.Wm)("p",null,[(0,t.Wm)("a",b,[f,(0,t.Wm)(s)])])],64)}}},7453:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-0f452359",path:"/basic/ecma/2021.html",title:"ECMAScript 2021 主要包含内容",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"String.prototype.replaceAll",slug:"string-prototype-replaceall",children:[]},{level:2,title:"Promise.any",slug:"promise-any",children:[]},{level:2,title:"WeakRefs",slug:"weakrefs",children:[{level:3,title:"1、WeakRef",slug:"_1、weakref",children:[]},{level:3,title:"2、FinalizationRegistry",slug:"_2、finalizationregistry",children:[]}]},{level:2,title:"Logical Assignment Operators",slug:"logical-assignment-operators",children:[]},{level:2,title:"Numeric separators",slug:"numeric-separators",children:[]}],filePathRelative:"basic/ecma/2021.md",git:{}}}}]);