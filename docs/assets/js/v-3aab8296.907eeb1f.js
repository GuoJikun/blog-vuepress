"use strict";(self.webpackChunkblogs_gjk=self.webpackChunkblogs_gjk||[]).push([[396],{2497:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="数据结构之-list" tabindex="-1"><a class="header-anchor" href="#数据结构之-list" aria-hidden="true">#</a> 数据结构之 List</h1><h2 id="列表-list-的定义" tabindex="-1"><a class="header-anchor" href="#列表-list-的定义" aria-hidden="true">#</a> 列表[List]的定义</h2><p>列表是一组有序的数据。每个列表中的数据项称为元素。在 JavaScript 中，列表中的元素 可以是任意数据类型。列表中可以保存多少元素并没有事先限定，实际使用时元素的数量 受到程序内存的限制。</p><p>不包含任何元素的列表称为空列表。列表中包含元素的个数称为列表的 <code>length</code>。在内部实 现上，用一个变量 <code>listSize</code> 保存列表中元素的个数。可以在列表末尾 <code>append</code> 一个元素， 也可以在一个给定元素后或列表的起始位置 <code>insert</code> 一个元素。使用<code>remove</code> 方法从列表中 删除元素，使用 <code>clear</code> 方法清空列表中所有的元素。</p><p>还可以使用 <code>toString()</code> 方法显示列表中所有的元素，使用 <code>getElement()</code> 方法显示当前元素。列表拥有描述元素位置的属性。列表有前有后（分别对应 front 和 end）。使用 <code>next()</code> 方 法可以从当前元素移动到下一个元素，使用 <code>prev()</code> 方法可以移动到当前元素的前一个元 素。还可以使用 <code>moveTo(n)</code> 方法直接移动到指定位置，这里的 n 表示要移动到第 n 个位置。 <code>curPos</code> 属性表示列表中的当前位置。</p><p>列表的抽象数据类型定义</p><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>listSize</td><td>列表的元素个数</td></tr><tr><td>pos</td><td>列表的当前位置</td></tr><tr><td>length</td><td>返回列表中元素的个数</td></tr><tr><td>clear（方法）</td><td>清空列表中的所有元素</td></tr><tr><td>toString（方法）</td><td>返回列表的字符串形式</td></tr><tr><td>getElement（方法）</td><td>返回当前位置的元素</td></tr><tr><td>insert（方法）</td><td>在现有元素后插入新元素</td></tr><tr><td>append（方法）</td><td>在列表的末尾添加新元素</td></tr><tr><td>remove（方法）</td><td>从列表中删除元素</td></tr><tr><td>front（方法）</td><td>将列表的当前位置设移动到第一个元素</td></tr><tr><td>end（方法）</td><td>将列表的当前位置移动到最后一个元素</td></tr><tr><td>prev（方法）</td><td>将当前位置后移一位</td></tr><tr><td>next（方法）</td><td>将当前位置前移一位</td></tr><tr><td>curPos（方法）</td><td>返回列表的当前位置</td></tr><tr><td>moveTo（方法）</td><td>将当前位置移动到指定位置</td></tr><tr><td>contains（方法）</td><td>判断给定值是否在列表中</td></tr><tr><td>getElement（方法）</td><td>显示当前值</td></tr></tbody></table><h2 id="实现列表类" tabindex="-1"><a class="header-anchor" href="#实现列表类" aria-hidden="true">#</a> 实现列表类</h2><p>根据上面定义的列表抽象数据类型，可以直接实现一个 List 类。让我们从定义构造函数开 始，虽然它本身并不是列表抽象数据类型定义的一部分：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">curPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="append-给列表添加元素" tabindex="-1"><a class="header-anchor" href="#append-给列表添加元素" aria-hidden="true">#</a> append：给列表添加元素</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>当新元素就位后，变量 <code>listSize</code> 加 1。</p><h3 id="find-在列表中查找某一元素" tabindex="-1"><a class="header-anchor" href="#find-在列表中查找某一元素" aria-hidden="true">#</a> find：在列表中查找某一元素</h3><p><code>find()</code> 方法通过对数组对象 <code>dataStore</code> 进行迭代，查找给定的元素。如果找到，就返回该 元素在列表中的位置，否则返回 -1，这是在数组中找不到指定元素时返回的标准值。我们 可以在 remove() 方法中利用此值做错误校验。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="remove-从列表中删除元素" tabindex="-1"><a class="header-anchor" href="#remove-从列表中删除元素" aria-hidden="true">#</a> remove：从列表中删除元素</h3><p><code>remove()</code> 方法是 <code>List</code> 类中较难实现的 一个方法。首先，需要在列表中找到该元素，然后删除它，并且调整底层的数组对象以填 补删除该元素后留下的空白。好消息是，可以使用数组的 <code>splice()</code> 方法简化这一过程。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="length-列表中有多少个元素" tabindex="-1"><a class="header-anchor" href="#length-列表中有多少个元素" aria-hidden="true">#</a> length：列表中有多少个元素</h3><p><code>length()</code> 方法返回列表中元素的个数：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="tostring-显示列表中的元素" tabindex="-1"><a class="header-anchor" href="#tostring-显示列表中的元素" aria-hidden="true">#</a> toString：显示列表中的元素</h3><p>现在是时候创建一个方法，用来显示列表中的元素了。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="insert-向列表中插入一个元素" tabindex="-1"><a class="header-anchor" href="#insert-向列表中插入一个元素" aria-hidden="true">#</a> insert：向列表中插入一个元素</h3><p>接下来要讨论的方法是 <code>insert()</code>。如果在 List 中间位置删除了一个元素，但是现在又想将 它放回原来的位置，该怎么办？ <code>insert()</code> 方法需要知道将元素插入到什么位置，因此现在 我们假设插入是指插入到列表中某个元素之后。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="clear-清空列表中所有的元素" tabindex="-1"><a class="header-anchor" href="#clear-清空列表中所有的元素" aria-hidden="true">#</a> clear：清空列表中所有的元素</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="contains-判断给定值是否在列表中" tabindex="-1"><a class="header-anchor" href="#contains-判断给定值是否在列表中" aria-hidden="true">#</a> contains：判断给定值是否在列表中</h3><p>当需要判断一个给定值是否在列表中时，<code>contains()</code>方法就变得很有用。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">contains</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>也可以使用之前实现的 find 方法</p></blockquote><h3 id="遍历列表" tabindex="-1"><a class="header-anchor" href="#遍历列表" aria-hidden="true">#</a> 遍历列表</h3><p>最后的一组方法允许用户在列表上自由移动</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">curPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> position<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="使用迭代器访问列表" tabindex="-1"><a class="header-anchor" href="#使用迭代器访问列表" aria-hidden="true">#</a> 使用迭代器访问列表</h2><p>使用迭代器，可以不必关心数据的内部存储方式，以实现对列表的遍历。前面提到的方法 <code>front()</code>、<code>end()</code>、<code>prev()</code>、<code>next()</code> 和<code>curPos</code> 就实现了 List 类的一个迭代器。以下是和使 用数组索引的方式相比，使用迭代器的一些优点。</p><p>访问列表元素时不必关心底层的数据存储结构。</p><p>当为列表添加一个元素时，索引的值就不对了，此时只用更新列表，而不用更新迭代器。</p><p>可以用不同类型的数据存储方式实现 List 类，迭代器为访问列表里的元素提供了一种 统一的方式。 了解了这些优点后，来看一个使用迭代器遍历列表的例子：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> lists<span class="token punctuation">.</span><span class="token function">curPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> lists<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在 for 循环的一开始，将列表的当前位置设置为第一个元素。只要 <code>curPos</code> 的值小于列表 的长度，就一直循环，每一次循环都调用 <code>next()</code> 方法将当前位置向前移动一位。</p><p>同理，还可以从后向前遍历列表，代码如下：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> lists<span class="token punctuation">.</span><span class="token function">curPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> lists<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>循环从列表的最后一个元素开始，当当前位置大于或等于 0 时，调用 <code>prev()</code> 方法后移 一位。</p><p>迭代器只是用来在列表上随意移动，而不应该和任何为列表增加或删除元素的方法一起 使用。</p><h2 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> i\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>\n        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element\n    <span class="token punctuation">}</span>\n    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize\n    <span class="token punctuation">}</span>\n    <span class="token function">contains</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">curPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos\n    <span class="token punctuation">}</span>\n    <span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> position\n    <span class="token punctuation">}</span>\n    <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div>',50),t={render:function(n,s){return p}}},4006:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3aab8296",path:"/data-structure/list.html",title:"数据结构之 List",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"列表[List]的定义",slug:"列表-list-的定义",children:[]},{level:2,title:"实现列表类",slug:"实现列表类",children:[{level:3,title:"append：给列表添加元素",slug:"append-给列表添加元素",children:[]},{level:3,title:"find：在列表中查找某一元素",slug:"find-在列表中查找某一元素",children:[]},{level:3,title:"remove：从列表中删除元素",slug:"remove-从列表中删除元素",children:[]},{level:3,title:"length：列表中有多少个元素",slug:"length-列表中有多少个元素",children:[]},{level:3,title:"toString：显示列表中的元素",slug:"tostring-显示列表中的元素",children:[]},{level:3,title:"insert：向列表中插入一个元素",slug:"insert-向列表中插入一个元素",children:[]},{level:3,title:"clear：清空列表中所有的元素",slug:"clear-清空列表中所有的元素",children:[]},{level:3,title:"contains：判断给定值是否在列表中",slug:"contains-判断给定值是否在列表中",children:[]},{level:3,title:"遍历列表",slug:"遍历列表",children:[]}]},{level:2,title:"使用迭代器访问列表",slug:"使用迭代器访问列表",children:[]},{level:2,title:"完整代码",slug:"完整代码",children:[]}],filePathRelative:"data-structure/list.md",git:{}}}}]);