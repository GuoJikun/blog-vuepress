"use strict";(self.webpackChunkblogs_gjk=self.webpackChunkblogs_gjk||[]).push([[268],{62:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合" aria-hidden="true">#</a> Set 集合</h1><p>数组（列表）、栈、队列和链表这些顺序数据结构对你来说应该不陌生了。现在我们要学习集合，这是一种不允许值重复的顺序数据结构。我们将要学到如何创建集合这种数据结构，如何添加和移除值，如何搜索值是否存在。你也会学到如何进行并集、交集、差集等数学运算。</p><blockquote><p>本章内容包括：</p><ul><li>从头创建一个 Set 类</li><li>用 Set 来进行数学运算</li></ul></blockquote><h2 id="构建数据集合" tabindex="-1"><a class="header-anchor" href="#构建数据集合" aria-hidden="true">#</a> 构建数据集合</h2><p>集合是由一组无序且唯一（即不能重复）的项组成的。该数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。</p><p>在深入学习集合的计算机科学实现之前，我们先看看它的数学概念。在数学中，集合是一组不同对象的集。</p><p>比如说，一个由大于或等于 0 的整数组成的自然数集合：N = {0, 1, 2, 3, 4, 5, 6, …}。集合中的对象列表用花括号（{}）包围。</p><p>还有一个概念叫空集。空集就是不包含任何元素的集合。比如 24 和 29 之间的素数集合，由于 24 和 29 之间没有素数（除了 1 和自身，没有其他正因数的、大于 1 的自然数），这个集合就是空集。空集用{ }表示。</p><p>你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。在数学中，集合也有并集、交集、差集等基本运算。本文也会介绍这些运算。</p><h2 id="创建集合类" tabindex="-1"><a class="header-anchor" href="#创建集合类" aria-hidden="true">#</a> 创建集合类</h2><h3 id="创建基础类" tabindex="-1"><a class="header-anchor" href="#创建基础类" aria-hidden="true">#</a> 创建基础类</h3><p>用下面的 Set 类以及它的构造函数声明作为开始。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Set</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>有一个非常重要的细节是，我们使用对象而不是数组来表示集合（items）。不过，也可以用数组实现。此处用对象来实现，和我们在第 4 章与第 5 章中学习到的对象实现方式很相似。同样地，JavaScript 的对象不允许一个键指向两个不同的属性，也保证了集合里的元素都是唯一的。</p></blockquote><p>接下来，需要声明一些集合可用的方法（我们会尝试模拟与 ECMAScript 2015 实现相同的 Set 类）。</p><ul><li>add(element)：向集合添加一个新元素。</li><li>delete(element)：从集合移除一个元素。</li><li>has(element)：如果元素在集合中，返回 true，否则返回 false。</li><li>clear()：移除集合中的所有元素。</li><li>size()：返回集合所包含元素的数量。它与数组的 length 属性类似。</li><li>values()：返回一个包含集合中所有值（元素）的数组。</li></ul><h3 id="has-item-方法" tabindex="-1"><a class="header-anchor" href="#has-item-方法" aria-hidden="true">#</a> has(item)方法</h3><p>首先要实现的是 <code>has(element)</code>方法，因为它会被 <code>add</code>、<code>delete</code> 等其他方法调用。它用来检验某个元素是否存在于集合中，下面看看它的实现。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>除了使用<code>Object.prototype.hasOwnProperty</code>方法实现之外，还可以使用<code>item in this.items</code>和<code>this.items.hasOwnProperty(item)</code>来实现<code>has</code>方法。</p></blockquote><h3 id="add-item-方法" tabindex="-1"><a class="header-anchor" href="#add-item-方法" aria-hidden="true">#</a> add(item)方法</h3><p>接下来要实现 <code>add(item)</code> 方法。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对于给定的 item，可以检查它是否存在于集合中。如果不存在，就把 item 添加到 集合中，并返回 true，表示添加了该元素。如果集合中已经有了这个元素，就返回 false， 表示没有添加它。</p><h3 id="delete-item-和-clear-方法" tabindex="-1"><a class="header-anchor" href="#delete-item-和-clear-方法" aria-hidden="true">#</a> delete(item) 和 clear() 方法</h3><p>下面要实现 <code>delete(item)</code> 方法。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">delete</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在 delete 方法中，我们会验证给定的 item 是否存在于集合中。如果存在，就从集合中移除 item，返回 true，表示元素被移除；否则返回 false。</p><p>由于我们是使用对象来存储集合的 items 对象，那么就可以简单的使用对象的 delete 运算符从 items 中删除元素。</p><p>如果想移除集合中的所有值，可以用 clear 方法。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="size-方法" tabindex="-1"><a class="header-anchor" href="#size-方法" aria-hidden="true">#</a> size() 方法</h3><blockquote><p>实现 size 方法有几种方式：</p><ol><li>使用一个 length 变量，每当使用 add 或 delete 方法时就控制它</li><li><code>Object.keys(this.items).length</code></li><li>使用<code>for in</code> (要记得使用<code>hasOwnProperty</code>判断一下)</li><li>...</li></ol></blockquote><p>现在我们使用第 2 中方式来实现，代码如下</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="values-方法" tabindex="-1"><a class="header-anchor" href="#values-方法" aria-hidden="true">#</a> values() 方法</h3><p>要实现 <code>values()</code> 方法，我们同样可以使用 <code>Object</code> 类内置的 <code>values</code> 方法。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p><code>Object.values()</code>方法返回了一个包含给定对象所有属性值的数组。它是在<code>ECMAScript 2017</code> 中被添加进来的，目前只在现代浏览器中可用。</p></blockquote><h3 id="使用-set-类" tabindex="-1"><a class="header-anchor" href="#使用-set-类" aria-hidden="true">#</a> 使用 Set 类</h3><p>现在数据结构已经完成了，看看如何使用它吧。试着执行一些命令，测试我们的 Set 类。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出[1]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 1</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出[1, 2]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 2</span>\nset<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出[2]</span>\nset<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出[]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="集合运算" tabindex="-1"><a class="header-anchor" href="#集合运算" aria-hidden="true">#</a> 集合运算</h2><p>集合是数学中基础的概念，在计算机领域也非常重要。它在计算机科学中的主要应用之一是数据库，而数据库是大多数应用程序的根基。集合被用于查询的设计和处理。当我们创建一条从关系型数据库（Oracle、Microsoft SQL Server、MySQL 等）中获取一个数据集合的查询语句时，使用的就是集合运算，并且数据库也会返回一个数据集合。当我们创建一条 <code>SQL</code> 查询命令时，可以指定是从表中获取全部数据还是获取其中的子集；也可以获取两张表共有的数据、只存在于一张表中的数据（不存在于另一张表中），或是存在于两张表内的数据（通过其他运算）。这些 <code>SQL</code> 领域的运算叫作联接，而 <code>SQL</code> 联接的基础就是集合运算。</p><p>我们可以对集合进行如下运算。</p><ul><li>并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。</li><li>交集：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合。</li><li>差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合。</li><li>子集：验证一个给定集合是否是另一集合的子集。</li></ul><blockquote><p>重要的是要注意，本文实现的 <code>union</code>、<code>intersection</code> 和 <code>difference</code> 方法不会修改当前的 <code>Set</code> 类实例或是作为参数传入的 <code>otherSet</code>。没有副作用的方法和函数被称为纯函数。纯函数不会修改当前的实例或参数，只会生成一个新的结果。这在函数式编程中是非常重要的概念。</p></blockquote><h3 id="并集" tabindex="-1"><a class="header-anchor" href="#并集" aria-hidden="true">#</a> 并集</h3><p>并集的数学概念。集合 A 和集合 B 的并集表示为 $A ∪ B$，定义如下。</p><p>$$ A ∪ B = { x ∣ x ∈ A ∨ x ∈ B } $$</p><p>意思是 x（元素）存在于 A 中，或 x 存在于 B 中。下图展示了并集运算。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/caf57f98c03b4538aa7c9f1c6de3cfac~tplv-k3u1fbpfcp-watermark.image" alt="union.png"></p><p>代码实现</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">union</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> unionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    values <span class="token operator">=</span> otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> unionSet<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="交集" tabindex="-1"><a class="header-anchor" href="#交集" aria-hidden="true">#</a> 交集</h3><p>交集的数学概念。集合 A 和集合 B 的交集表示为 $A ∩ B$，定义如下。</p><p>$$ A ∩ B = { x ∣ x ∈ A ∧ x ∈ B } $$</p><p>意思是 x（元素）存在于 A 中，且 x 存在于 B 中。下图展示了交集运算。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/664d8d76875442e280f10633b216a4c5~tplv-k3u1fbpfcp-watermark.image" alt="intersection.png"></p><p>代码实现</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">intersection</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> intersectionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> otherValues <span class="token operator">=</span> otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> smallerValues <span class="token operator">=</span> values<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> biggerValues <span class="token operator">=</span> otherValues<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>otherValues<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        smallerValues <span class="token operator">=</span> otherValues<span class="token punctuation">;</span>\n        biggerValues <span class="token operator">=</span> values<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    smallerValues<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>biggerValues<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            intersectionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> intersectionSet<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>为了减少循环次数，在代码中判断了哪个集合的长度最小，然后循环长度较小的集合，以达到减少循环次数的目的。</p></blockquote><h3 id="差集" tabindex="-1"><a class="header-anchor" href="#差集" aria-hidden="true">#</a> 差集</h3><p>差集的数学概念。集合 A 和集合 B 的差集表示为 $A - B$，定义如下。</p><p>$$ A ∪ B = { x ∣ x ∈ A ∧ x ∉ B } $$</p><p>意思是 x（元素）存在于 A 中，且 x 不存在于 B 中。下图展示了集合 A 和集合 B 的差集运算。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c77b0cf27e8c41b181700f0846d96099~tplv-k3u1fbpfcp-watermark.image" alt="difference.png"></p><p>代码实现</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">difference</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> differenceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            differenceSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> differenceSet<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="子集" tabindex="-1"><a class="header-anchor" href="#子集" aria-hidden="true">#</a> 子集</h3><p>要介绍的最后一个集合运算是子集。其数学概念的一个例子是集合 A 是集合 B 的子集（或集合 B 包含集合 A），表示为 $A ∈ B$，定义如下。</p><p>$$ A ∪ B = { x ∣ ∀x ∈ A =&gt; x ∈ B } $$</p><p>意思是集合 A 中的每一个 x（元素），也需要存在于集合 B 中。下图展示了集合 A 是集合 B 的子集。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90a8dac147f94ec38efe4e604c49f12f~tplv-k3u1fbpfcp-watermark.image" alt="isSubsetOf.png"></p><p>代码实现</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">isSubsetOf</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> otherSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> isSubset <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            isSubset <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> isSubset<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>学习 JavaScript 数据结构与算法第三版</li></ul>',78),t={render:function(n,s){return p}}},1336:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4ae496bd",path:"/data-structure/set.html",title:"Set 集合",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"构建数据集合",slug:"构建数据集合",children:[]},{level:2,title:"创建集合类",slug:"创建集合类",children:[{level:3,title:"创建基础类",slug:"创建基础类",children:[]},{level:3,title:"has(item)方法",slug:"has-item-方法",children:[]},{level:3,title:"add(item)方法",slug:"add-item-方法",children:[]},{level:3,title:"delete(item) 和 clear() 方法",slug:"delete-item-和-clear-方法",children:[]},{level:3,title:"size() 方法",slug:"size-方法",children:[]},{level:3,title:"values() 方法",slug:"values-方法",children:[]},{level:3,title:"使用 Set 类",slug:"使用-set-类",children:[]}]},{level:2,title:"集合运算",slug:"集合运算",children:[{level:3,title:"并集",slug:"并集",children:[]},{level:3,title:"交集",slug:"交集",children:[]},{level:3,title:"差集",slug:"差集",children:[]},{level:3,title:"子集",slug:"子集",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"data-structure/set.md",git:{}}}}]);